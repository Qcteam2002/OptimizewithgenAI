from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import os
import json
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
SAVE_PRODUCT_API = f"{os.getenv('API_BASE_URL')}/api/save-optimized-product"

# Load library.json
try:
    with open('./src/library.json', 'r', encoding='utf-8') as f:
        library_data = json.load(f)
        print("üìö Th∆∞ vi·ªán d·ªØ li·ªáu ƒë√£ load th√†nh c√¥ng!")
except Exception as e:
    library_data = {}
    print("‚ùå L·ªói khi ƒë·ªçc th∆∞ vi·ªán d·ªØ li·ªáu:", e)

def generate_prompt(title, description, library, featured_media, image_list):
    return {
        "language": "English",
        "seoProductPrompt": {
            "task": "Vi·∫øt ti√™u ƒë·ªÅ v√† m√¥ t·∫£ chu·∫©n SEO, tƒÉng chuy·ªÉn ƒë·ªïi v√† t·∫°o c·∫£m x√∫c mua h√†ng.",
            "goal": "T·∫°o n·ªôi dung thu h√∫t, t·ªëi ∆∞u SEO, tƒÉng t·ª∑ l·ªá mua ngay.",
            "targetaudience": "[ch√®n ƒë·∫∑c ƒëi·ªÉm kh√°ch h√†ng ti·ªÅm nƒÉng]",
            "toneandvoice": "Cao c·∫•p ‚Üí chuy√™n nghi·ªáp. Th·ªùi trang ‚Üí s√°ng t·∫°o, c·∫£m x√∫c. Gia d·ª•ng ‚Üí th√¢n thi·ªán. Ng√¥n ng·ªØ ng·∫Øn g·ªçn, r√µ r√†ng, chia ƒëo·∫°n d·ªÖ ƒë·ªçc."
        },
        "referenceLibrary": library,
        "input": {
            "title": title,
            "description": description,
            "featuredMedia": featured_media,
            "imageList": [img.get("url") for img in image_list]
        },
        "jsonOutput": {
            "requirement": "**B·∫ÆT BU·ªòC** ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá theo ƒë√∫ng format n√†y. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o ngo√†i JSON.",
            "outputExample": {
                "optimizedTitle": "Best Selling Stainless Steel Necklace",
                "optimizedDescription": "This necklace is crafted from high-grade stainless steel...\n...",
                "gridView": []
            },
            "rules": {
                "optimizedDescription": "ph·∫£i d√πng '\\n' ƒë·ªÉ xu·ªëng d√≤ng r√µ r√†ng.",
                "gridView": {
                    "imageSelection": "Ch·ªçn ·∫£nh minh ho·∫° tr·ª±c quan, li√™n quan nh·∫•t."
                }
            }
        }
    }

@app.route("/api/openai", methods=["POST"])
def optimize():
    try:
        data = request.json
        id = data["id"]
        title = data["title"]
        description = data["description"]
        featured_media = data.get("featuredMedia", "")
        image_list = data.get("image", [])

        prompt = generate_prompt(title, description, library_data, featured_media, image_list)

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "B·∫°n l√† chuy√™n gia content SEO."},
                {"role": "user", "content": json.dumps(prompt, ensure_ascii=False)}
            ]
        )

        content = response.choices[0].message.content.strip().strip("```json").strip("```")
        ai_data = json.loads(content)

        save_response = requests.post(SAVE_PRODUCT_API, json={
            "id": id,
            "optimizedTitle": ai_data.get("optimizedTitle"),
            "optimizedDescription": ai_data.get("optimizedDescription"),
            "gridView": ai_data.get("gridView")
        })

        return jsonify({
            "success": True,
            "data": ai_data,
            "dbResult": save_response.json()
        })

    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi OpenAI:", e)
        return jsonify({"error": str(e)}), 500

@app.route("/api/openai/reviews", methods=["POST"])
def generate_reviews():
    try:
        data = request.json
        id = data["id"]
        title = data["title"]
        description = data["description"]
        featured_media = data["featuredMedia"]

        prompt = f"""
Tr·∫£ l·ªùi b·∫±ng "Ti·∫ønh Anh"
B·∫°n l√† AI chuy√™n vi·∫øt ƒë√°nh gi√° t·ªïng quan cho s·∫£n ph·∫©m eCommerce.

üëâ Nhi·ªám v·ª•:
1. D·ª±a tr√™n {title}, {description}, {featured_media}
2. Tr·∫£ v·ªÅ ƒë√∫ng m·∫£ng JSON c√≥ 3 ƒë√°nh gi√° nh∆∞ sau:
[
  {{
    "title": "Ch·∫•t li·ªáu d√¢y",
    "comment": "D√¢y th√©p kh√¥ng g·ªâ, ƒëeo √™m tay, kh√¥ng d·ªã ·ª©ng.",
    "star": "AI-generated review based on product details from multiple sources."
  }}
]
‚ùó Tr·∫£ ƒë√∫ng JSON, kh√¥ng th√™m markdown ho·∫∑c text ngo√†i.
"""

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "B·∫°n l√† kh√°ch h√†ng ·∫©n danh ƒë·ªÉ l·∫°i review s·∫£n ph·∫©m."},
                {"role": "user", "content": prompt}
            ]
        )

        content = response.choices[0].message.content.strip().strip("```json").strip("```")
        reviews = json.loads(content)

        save_response = requests.post(SAVE_PRODUCT_API, json={
            "id": id,
            "aiReviews": reviews
        })

        return jsonify({"reviews": reviews})

    except Exception as e:
        print("‚ùå L·ªói t·∫°o review:", e)
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(port=5004)
