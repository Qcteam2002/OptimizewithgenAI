from flask import Flask, render_template, request, jsonify, session, send_file, Response
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO
import base64
import os
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import cv2
import numpy as np
import time
from datetime import datetime
import json
import tempfile
from werkzeug.utils import secure_filename
import requests
import subprocess
import openai
from flask_cors import CORS
import re
from promptoptimize import generate_prompt

app = Flask(__name__)
# CORS configuration
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})
app.secret_key = os.urandom(24)
gemini.api_key = os.getenv('GEMINI_API_KEY')
# client = genai.Client(api_key="AIzaSyAh_9Ku-QjqJ7o-gEGUvsK8dCNyygfD-q8")
client = genai.Client(gemini.api_key)

# Load OpenAI API key from environment variable
openai.api_key = os.getenv('OPENAI_API_KEY')

# Load library data from JSON file
library_data = {}
try:
    with open('library.json', 'r', encoding='utf-8') as f:
        library_data = json.load(f)
    print("üìö Library data loaded successfully!")
except Exception as e:
    print(f"‚ùå Error loading library data: {str(e)}")

# API base URL and endpoints
API_BASE_URL = os.getenv('API_BASE_URL')
SAVE_PRODUCT_API = f"{API_BASE_URL}/api/save-optimized-product"
SAVE_OPTIMIZED_IMAGE_API = f"{API_BASE_URL}/api/save-optimized-image"

# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
OUTPUT_DIR = 'output'
if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR)

# T·∫°o th∆∞ m·ª•c cho ·∫£nh ƒë√£ t·ªëi ∆∞u
OPTIMIZED_IMAGES_DIR = os.path.join(OUTPUT_DIR, 'optimized_images')
if not os.path.exists(OPTIMIZED_IMAGES_DIR):
    os.makedirs(OPTIMIZED_IMAGES_DIR)

# Global variable to store recording progress
recording_progress = 0

# Global dictionary to store video analysis results
video_analysis_results = {}

# Global variable for store analytics
next_store_analytics_id = 1
store_analytics = {}

# File ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ ph√¢n t√≠ch
ANALYTICS_FILE = 'store_analytics.json'

# Th√™m bi·∫øn v√† file ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ optimize image
OPTIMIZE_IMAGE_FILE = 'optimize_image_data.json'
optimize_image_data = {
    'next_id': 1,
    'results': {}
}

# Th√™m c√°c bi·∫øn c·∫•u h√¨nh
UPLOAD_FOLDER = 'static/uploads/videos'
ALLOWED_EXTENSIONS = {'mp4', 'avi', 'mov'}

# T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Th√™m bi·∫øn ƒë·ªÉ l∆∞u th√¥ng tin video ƒë√£ t·∫£i l√™n
UPLOADED_VIDEOS = {}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def record_webpage(url):
    global recording_progress
    try:
        print("\n[RECORD-WEBPAGE] Starting webpage recording process...")
        print(f"[RECORD-WEBPAGE] URL to record: {url}")
        
        recording_progress = 0
        # C·∫•u h√¨nh Chrome options
        print("[RECORD-WEBPAGE] Configuring Chrome options...")
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--start-maximized')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--disable-notifications')
        chrome_options.add_argument('--disable-popup-blocking')
        chrome_options.add_argument('--disable-extensions')  # T·∫Øt extensions
        chrome_options.add_argument('--disable-javascript')  # T·∫Øt JavaScript n·∫øu kh√¥ng c·∫ßn thi·∫øt
        chrome_options.add_argument('--disable-images')  # T·∫Øt t·∫£i h√¨nh ·∫£nh

        # Kh·ªüi ƒë·ªông tr√¨nh duy·ªát
        print("[RECORD-WEBPAGE] Starting Chrome browser...")
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(url)
        
        # ƒê·ª£i trang web t·∫£i xong (gi·∫£m th·ªùi gian ch·ªù)
        print("[RECORD-WEBPAGE] Waiting for page to load (3 seconds)...")
        time.sleep(3)

        # Inject JS ƒë·ªÉ lo·∫°i b·ªè popup
        remove_popup_script = """
        (() => {
        window.alert = function () {};
        window.confirm = function () { return true; };

        const keywords = ['popup', 'modal', 'overlay', 'dialog', 'klaviyo', 'subscribe'];
        keywords.forEach(k => {
            document.querySelectorAll(`[class*="${k}"], [id*="${k}"]`).forEach(e => e.remove());
        });

        document.querySelectorAll('[role="dialog"]').forEach(e => e.remove());
        })();
        """
        driver.execute_script(remove_popup_script)
        print("[RECORD-WEBPAGE] Popups removed via JS injection.")
        
        # L·∫•y k√≠ch th∆∞·ªõc trang
        print("[RECORD-WEBPAGE] Getting page dimensions...")
        total_height = driver.execute_script("return document.body.scrollHeight")
        viewport_height = driver.execute_script("return window.innerHeight")
        print(f"[RECORD-WEBPAGE] Total height: {total_height}, Viewport height: {viewport_height}")
        
        # T·∫°o video writer v·ªõi FPS cao h∆°n 
        print("[RECORD-WEBPAGE] Creating video writer...")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = os.path.join(OUTPUT_DIR, f'recording_{timestamp}.avi')
        print(f"[RECORD-WEBPAGE] Video will be saved to: {output_path}")
        
        fourcc = cv2.VideoWriter_fourcc(*'MJPG')
        out = cv2.VideoWriter(output_path, fourcc, 1.5, (1920, 1080))  # TƒÉng FPS l√™n 3.0 ƒë·ªÉ video ch·∫°y nhanh h∆°n nhi·ªÅu
        
        # Scroll v√† record
        print("\n[RECORD-WEBPAGE] Starting video recording process...")
        print("[RECORD-WEBPAGE] This process will:")
        print("1. Scroll through the webpage")
        print("2. Capture screenshots at each position")
        print("3. Convert screenshots to video frames")
        print("4. Save frames to video file")
        print("\n[RECORD-WEBPAGE] Recording progress:")
        
        current_position = 0
        scroll_step = 200  # TƒÉng b∆∞·ªõc scroll l√™n 200px
        frame_count = 0
        last_frame_time = time.time()
        
        while current_position < total_height:
            # Update progress
            progress = int((current_position / total_height) * 100)
            recording_progress = min(progress, 99)
            print(f"[RECORD-WEBPAGE] Current progress: {recording_progress}%")
            
            # Scroll m∆∞·ª£t xu·ªëng
            for pos in range(current_position, min(current_position + viewport_height, total_height), scroll_step):
                driver.execute_script(f"window.scrollTo({{top: {pos}, behavior: 'auto'}});")
                time.sleep(0.1)  # Gi·∫£m th·ªùi gian ch·ªù xu·ªëng 0.1 gi√¢y
                
                # Ch·ª•p screenshot v√† x·ª≠ l√Ω frame
                screenshot = driver.get_screenshot_as_png()
                image = Image.open(BytesIO(screenshot))
                image = image.convert('RGB')
                frame = np.array(image)
                frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
                frame = cv2.resize(frame, (1920, 1080))
                
                # Th√™m frame v√†o video - kh√¥ng l·∫∑p l·∫°i frame
                out.write(frame)
                frame_count += 1
                
                # In log m·ªói 5 frame
                if frame_count % 5 == 0:
                    current_time = time.time()
                    elapsed_time = current_time - last_frame_time
                    print(f"[RECORD-WEBPAGE] Processed {frame_count} frames in {elapsed_time:.1f} seconds")
                    last_frame_time = current_time
            
            time.sleep(0.1)  # Gi·∫£m th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn scroll
            current_position += viewport_height
            
            if current_position >= total_height:
                break
        
        # Set progress to 100% when complete
        recording_progress = 100
        print("\n[RECORD-WEBPAGE] Recording completed!")
        print(f"[RECORD-WEBPAGE] Total frames recorded: {frame_count}")
        
        # ƒê√≥ng video writer v√† tr√¨nh duy·ªát
        print("[RECORD-WEBPAGE] Closing video writer and browser...")
        out.release()
        driver.quit()
        
        print(f"[RECORD-WEBPAGE] Video successfully saved to: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"[RECORD-WEBPAGE] ERROR: {str(e)}")
        if 'driver' in locals():
            driver.quit()
        if 'out' in locals():
            out.release()
        return None

def generate_image_from_prompt(prompt, image1_data=None, image2_data=None):
    try:
        contents = [prompt]
        if image1_data:
            contents.append(types.Part(inline_data=types.Blob(mime_type="image/png", data=image1_data)))
        if image2_data:
            contents.append(types.Part(inline_data=types.Blob(mime_type="image/png", data=image2_data)))

        print("Prompt:", prompt)
        if image1_data:
            print("Image 1 uploaded")
        if image2_data:
            print("Image 2 uploaded")

        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=contents,
            config=types.GenerateContentConfig(
                response_modalities=["Text", "Image"]
            ),
        )

        for candidate in response.candidates:
            for part in candidate.content.parts:
                if part.inline_data and part.inline_data.mime_type == "image/png":
                    return part.inline_data.data
        return None
    except Exception as e:
        print("Error:", e)
        return None

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'clear_conversation' in request.form:
            session.pop('conversation', None)
            return jsonify({'message': 'Conversation cleared'})

        prompt = request.form['prompt']
        image1_data = request.files['image1'].read() if 'image1' in request.files else None
        image2_data = request.files['image2'].read() if 'image2' in request.files else None

        image_result = generate_image_from_prompt(prompt, image1_data, image2_data)
        text_result = None

        if image_result:
            image_base64 = base64.b64encode(image_result).decode('utf-8')
            return jsonify({'image': image_base64, 'text': None})
        else:
            response = client.models.generate_content(
                model="gemini-2.0-flash-exp",
                contents=prompt,
                config=types.GenerateContentConfig(
                    response_modalities=["Text"]
                ),
            )
            for candidate in response.candidates:
                for part in candidate.content.parts:
                    if part.text:
                        text_result = part.text
            return jsonify({'image': None, 'text': text_result})

    return render_template('index.html')

@app.route('/record', methods=['POST'])
def record():
    try:
        data = request.get_json()
        url = data.get('url')
        
        if not url:
            return jsonify({'error': 'URL is required'}), 400
            
        # B·∫Øt ƒë·∫ßu ghi l·∫°i trang web
        output_path = record_webpage(url)
        
        if output_path:
            return jsonify({
                'success': True,
                'message': 'Recording completed',
                'video_path': output_path
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Failed to record webpage'
            }), 500
            
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/record_progress')
def get_record_progress():
    def generate():
        global recording_progress
        while recording_progress < 100:
            yield f"data: {{'percentage': {recording_progress}}}\n\n"
            time.sleep(1)
        yield f"data: {{'percentage': 100}}\n\n"
    
    return Response(generate(), mimetype='text/event-stream')

@app.route('/recordings', methods=['GET'])
def get_recordings():
    try:
        recordings = []
        for filename in os.listdir(OUTPUT_DIR):
            if filename.endswith('.mp4') or filename.endswith('.avi'):
                file_path = os.path.join(OUTPUT_DIR, filename)
                creation_time = os.path.getmtime(file_path)
                creation_datetime = datetime.fromtimestamp(creation_time)
                formatted_time = creation_datetime.strftime("%d/%m/%Y %H:%M:%S")
                
                recordings.append({
                    'name': filename,
                    'path': f'/output/{filename}',
                    'has_analysis': filename in video_analysis_results,
                    'creation_time': formatted_time,
                    'timestamp': creation_time
                })
        
        # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o, m·ªõi nh·∫•t ƒë·∫ßu ti√™n
        recordings.sort(key=lambda x: x['timestamp'], reverse=True)
        
        return jsonify({
            'success': True,
            'recordings': recordings
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/output/<path:filename>')
def serve_video(filename):
    return send_file(os.path.join(OUTPUT_DIR, filename))

@app.route('/analyze_video', methods=['POST'])
def analyze_video():
    try:
        data = request.get_json()
        video_path = data.get('video_path')
        
        if not video_path:
            return jsonify({
                'success': False,
                'message': 'Video path is required'
            }), 400
            
        # Get filename from path
        filename = os.path.basename(video_path)
            
        # Check if analysis already exists
        if filename in video_analysis_results:
            print(f"[DEBUG] Using cached analysis for {filename}")
            return jsonify({
                'success': True,
                'analysis': video_analysis_results[filename]
            })
            
        # Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi th√†nh tuy·ªát ƒë·ªëi
        absolute_video_path = video_path
        if video_path.startswith('/output/'):
            absolute_video_path = os.path.join(os.getcwd(), 'output', filename)
            
        print(f"[DEBUG] Analyzing video at absolute path: {absolute_video_path}")
        
        if not os.path.exists(absolute_video_path):
            return jsonify({
                'success': False,
                'message': f'Video file not found: {absolute_video_path}'
            }), 404
        
        # Ph√¢n t√≠ch video s·ª≠ d·ª•ng Vertex AI Gemini
        print(f"[DEBUG] Using Vertex AI Gemini to analyze video")
        
        try:
            # X√°c ƒë·ªãnh MIME type d·ª±a tr√™n ph·∫ßn m·ªü r·ªông c·ªßa file
            mime_type = "video/mp4"
            if absolute_video_path.lower().endswith('.avi'):
                mime_type = "video/mp4"  # S·ª≠ d·ª•ng mp4 v√¨ nhi·ªÅu API h·ªó tr·ª£ t·ªët h∆°n
                
            # ƒê·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c v·ªõi Vertex AI, ch√∫ng ta c·∫ßn t·∫°o file t·∫°m th·ªùi
            # ho·∫∑c upload file l√™n GCS. ƒê√¢y ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng c√°ch ƒë∆°n gi·∫£n h∆°n v·ªõi file tr·ª±c ti·∫øp
            
            # T·∫°o prompt chi ti·∫øt cho ph√¢n t√≠ch
            prompt = """H√£y ph√¢n t√≠ch trang web b√°n s·∫£n ph·∫©m n√†y v√† cung c·∫•p th√¥ng tin sau:
            1. S·∫£n ph·∫©m ch√≠nh ƒë∆∞·ª£c b√°n l√† g√¨?
            2. ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng m·ª•c ti√™u m√† trang web h∆∞·ªõng ƒë·∫øn l√† ai?
            3. Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng tr√™n trang web n√†y nh∆∞ th·∫ø n√†o? (ƒêi·ªÅu h∆∞·ªõng, b·ªë c·ª•c, t·ªëc ƒë·ªô t·∫£i ∆∞·ªõc t√≠nh, t√≠nh th√¢n thi·ªán tr√™n thi·∫øt b·ªã di ƒë·ªông)
            4. Th√¥ng tin v·ªÅ s·∫£n ph·∫©m (m√¥ t·∫£, h√¨nh ·∫£nh, gi√° c·∫£) ƒë∆∞·ª£c tr√¨nh b√†y nh∆∞ th·∫ø n√†o?
            5. Ch√≠nh s√°ch b√°n h√†ng v√† v·∫≠n chuy·ªÉn c√≥ r√µ r√†ng v√† d·ªÖ hi·ªÉu kh√¥ng?
            6. M·ª©c ƒë·ªô tin c·∫≠y c·ªßa trang web (d·ª±a tr√™n c√°c y·∫øu t·ªë c√≥ th·ªÉ th·∫•y tr√™n trang).
            7. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán ƒë·ªÉ tƒÉng doanh s·ªë v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng (t·ªëi thi·ªÉu 3 ƒë·ªÅ xu·∫•t c·ª• th·ªÉ)"""
            
            # S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t frame do Vertex AI kh√¥ng h·ªó tr·ª£ tr·ª±c ti·∫øp
            # ƒë·ªçc file video local m√† kh√¥ng upload l√™n GCS
            
            # Tr√≠ch xu·∫•t frames t·ª´ video
            cap = cv2.VideoCapture(absolute_video_path)
            if not cap.isOpened():
                return jsonify({
                    'success': False,
                    'message': f'Failed to open video: {absolute_video_path}'
                }), 500
                
            # ƒê·∫øm s·ªë frame
            total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            fps = cap.get(cv2.CAP_PROP_FPS)
            duration = total_frames / fps if fps > 0 else 0
            
            print(f"[DEBUG] Video info: {total_frames} frames, {fps} fps, {duration:.2f} seconds")
            
            # Tr√≠ch xu·∫•t 3 frame ƒë·∫°i di·ªán
            frames = []
            frame_indices = []
            
            if total_frames > 0:
                # Ch·ªçn 3 frame: ƒë·∫ßu (10%), gi·ªØa (50%), cu·ªëi (90%)
                frame_indices = [int(total_frames * 0.1), int(total_frames * 0.5), int(total_frames * 0.9)]
                
                for idx in frame_indices:
                    cap.set(cv2.CAP_PROP_POS_FRAMES, idx)
                    ret, frame = cap.read()
                    if ret:
                        # Gi·∫£m k√≠ch th∆∞·ªõc frame ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng
                        frame = cv2.resize(frame, (800, 450))
                        # Chuy·ªÉn ƒë·ªïi frame th√†nh file
                        _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
                        frames.append(buffer)
            
            cap.release()
            
            if not frames:
                return jsonify({
                    'success': False,
                    'message': 'No frames could be extracted from video'
                }), 500
            
            print(f"[DEBUG] Extracted {len(frames)} frames for analysis")
            
            # Initialize Vertex AI client
            client_options = {"api_endpoint": f"{GCP_LOCATION}-aiplatform.googleapis.com"}
            
            try:
                vertex_client = aiplatform.gapic.GenerativeModelServiceClient(client_options=client_options)
                model = generative_models.GenerativeModel(model_name="gemini-1.5-pro", client=vertex_client)
                
                # T·∫°o n·ªôi dung v·ªõi frames
                contents = [generative_models.TextPart(text=prompt)]
                
                # Th√™m frames v√†o n·ªôi dung
                for i, frame_buffer in enumerate(frames):
                    with tempfile.NamedTemporaryFile(suffix='.jpg') as temp_file:
                        temp_file.write(frame_buffer)
                        temp_file.flush()
                        
                        image_part = generative_models.Image.load_from_file(temp_file.name)
                        contents.append(image_part)
                
                # G·ª≠i request ƒë·∫øn Vertex AI
                response = model.generate_content(contents=contents)
                
                # L·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch
                analysis_result = response.text
                
                print(f"[DEBUG] Analysis result length: {len(analysis_result)} characters")
                
                # Store analysis result
                video_analysis_results[filename] = analysis_result
                
                return jsonify({
                    'success': True,
                    'analysis': analysis_result
                })
                
            except Exception as vertex_error:
                print(f"[DEBUG] Error with Vertex AI: {str(vertex_error)}")
                
                # Fallback to standard Gemini API if Vertex AI fails
                print("[DEBUG] Falling back to standard Gemini API")
                
                # Convert frames to base64
                frame_base64 = []
                for frame_buffer in frames:
                    frame_base64.append(base64.b64encode(frame_buffer).decode('utf-8'))
                
                # G·ª≠i frames v√† prompt ƒë·∫øn Gemini
                contents = [prompt]
                
                # Th√™m t·ª´ng frame d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
                for frame in frame_base64:
                    contents.append(
                        types.Part(inline_data=types.Blob(
                            mime_type="image/jpeg",
                            data=base64.b64decode(frame)
                        ))
                    )
                
                response = client.models.generate_content(
                    model="gemini-2.0-flash-exp",
                    contents=contents,
                    config=types.GenerateContentConfig(
                        response_modalities=["Text"]
                    ),
                )
                
                analysis_result = ""
                for candidate in response.candidates:
                    for part in candidate.content.parts:
                        if part.text:
                            analysis_result = part.text
                            break
                    if analysis_result:
                        break
                
                # Store analysis result
                video_analysis_results[filename] = analysis_result
                
                return jsonify({
                    'success': True,
                    'analysis': analysis_result
                })
            
        except Exception as api_error:
            print(f"[DEBUG] Error calling API: {str(api_error)}")
            
            # T·∫°o ph√¢n t√≠ch l·ªói m·∫´u n·∫øu API l·ªói
            fallback_analysis = f"""PRODUCT NAME: Website Analysis

OVERALL ANALYSIS:
Kh√¥ng th·ªÉ ph√¢n t√≠ch video do g·∫∑p l·ªói t·ª´ API. ƒê√¢y c√≥ th·ªÉ l√† do k√≠ch th∆∞·ªõc video qu√° l·ªõn ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.

STRENGTHS:
- Kh√¥ng c√≥ th√¥ng tin

WEAKNESSES:
- Kh√¥ng c√≥ th√¥ng tin

IMPROVEMENT SUGGESTIONS:
- Th·ª≠ ghi l·∫°i video v·ªõi th·ªùi gian ng·∫Øn h∆°n
- Th·ª≠ v·ªõi URL kh√°c c√≥ √≠t n·ªôi dung h∆°n

L·ªói chi ti·∫øt: {str(api_error)}
"""
            
            # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch l·ªói
            video_analysis_results[filename] = fallback_analysis
            
            return jsonify({
                'success': True,
                'analysis': fallback_analysis,
                'error_info': str(api_error)
            })
    
    except Exception as e:
        print(f"[DEBUG] Error analyzing video: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

# Load analytics from file when starting up
def load_analytics():
    global store_analytics, next_store_analytics_id
    try:
        if os.path.exists(ANALYTICS_FILE):
            with open(ANALYTICS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                store_analytics = data.get('analytics', {})
                next_store_analytics_id = data.get('next_id', 1)
                print(f"[STARTUP] Loaded {len(store_analytics)} analytics records")
    except Exception as e:
        print(f"[STARTUP] Error loading analytics: {str(e)}")
        store_analytics = {}
        next_store_analytics_id = 1

# Save analytics to file
def save_analytics():
    try:
        with open(ANALYTICS_FILE, 'w', encoding='utf-8') as f:
            json.dump({
                'analytics': store_analytics,
                'next_id': next_store_analytics_id
            }, f, ensure_ascii=False, indent=2)
        print(f"[SAVE] Saved {len(store_analytics)} analytics records")
    except Exception as e:
        print(f"[SAVE] Error saving analytics: {str(e)}")

# Load analytics when starting up
load_analytics()

@app.route('/store_analytics', methods=['GET', 'POST'])
def store_analytics_endpoint():
    global store_analytics
    
    if request.method == 'GET':
        # Chuy·ªÉn ƒë·ªïi dictionary th√†nh list v√† s·∫Øp x·∫øp theo timestamp gi·∫£m d·∫ßn
        analytics_list = list(store_analytics.values())
        analytics_list.sort(key=lambda x: x['timestamp'], reverse=True)
        return jsonify(analytics_list)
    
    elif request.method == 'POST':
        try:
            data = request.get_json()
            
            # Validate required fields
            required_fields = ['id', 'url', 'product_name', 'analysis', 'video_path']
            for field in required_fields:
                if field not in data:
                    return jsonify({
                        'success': False,
                        'message': f'Missing required field: {field}'
                    }), 400
            
            # Add timestamp if not provided
            if 'timestamp' not in data:
                data['timestamp'] = datetime.now().timestamp()
            
            # Add creation_time if not provided
            if 'creation_time' not in data:
                data['creation_time'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            
            # Store the analysis
            store_analytics[data['id']] = data
            
            # Save to file
            save_analytics()
            
            return jsonify({
                'success': True,
                'message': 'Analysis stored successfully'
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'message': str(e)
            }), 500

@app.route('/store_analysis/<analysis_id>', methods=['GET'])
def get_store_analysis(analysis_id):
    try:
        if analysis_id in store_analytics:
            return jsonify({
                'success': True,
                'analysis': store_analytics[analysis_id]['analysis']
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Analysis not found'
            }), 404
    except Exception as e:
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

def extract_scores_from_text(analysis_text):
    """
    Tr√≠ch xu·∫•t ƒëi·ªÉm s·ªë v√† th√¥ng tin t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch
    """
    criteria_scores = []
    total_score = 0
    grade = "Unknown"
    
    # T√¨m t·ªïng ƒëi·ªÉm
    for line in analysis_text.split('\n'):
        if "T·ªïng ƒëi·ªÉm:" in line:
            try:
                total_score = int(line.split(":")[1].split("/")[0].strip())
                break
            except:
                continue
    
    # T√¨m x·∫øp lo·∫°i
    for line in analysis_text.split('\n'):
        if "X·∫øp lo·∫°i:" in line:
            grade = line.split(":")[1].strip()
            break
    
    # Tr√≠ch xu·∫•t ƒëi·ªÉm t·ª´ng ti√™u ch√≠
    current_criterion = None
    for line in analysis_text.split('\n'):
        if "Ti√™u ch√≠ ƒë√°nh gi√°" in line:
            parts = line.split("\t")
            if len(parts) >= 4:
                criterion_name = parts[1].strip()
                explanation = parts[2].strip()
                try:
                    score = int(parts[3].strip().replace("[", "").replace("]", ""))
                    criteria_scores.append({
                        "name": criterion_name,
                        "score": score,
                        "explanation": explanation
                    })
                except:
                    continue
    
    return criteria_scores, total_score, grade

@app.route('/analyze_store', methods=['POST'])
def analyze_store():
    global next_store_analytics_id
    try:
        print("\n[ANALYZE-STORE] Starting store analysis process...")
        data = request.get_json()
        url = data.get('url')
        print(f"[ANALYZE-STORE] URL to analyze: {url}")
        
        if not url:
            print("[ANALYZE-STORE] ERROR: URL is required")
            return jsonify({'error': 'URL is required'}), 400
            
        # B∆∞·ªõc 1: Ghi l·∫°i trang web
        print(f"[ANALYZE-STORE] Step 1: Recording webpage...")
        recording_start_time = time.time()
        output_path = record_webpage(url)
        recording_end_time = time.time()
        recording_duration = recording_end_time - recording_start_time
        print(f"[ANALYZE-STORE] Recording completed in {recording_duration:.2f} seconds")
        
        if not output_path:
            print("[ANALYZE-STORE] ERROR: Failed to record webpage")
            return jsonify({
                'success': False,
                'message': 'Failed to record webpage'
            }), 500
            
        # B∆∞·ªõc 2: Ki·ªÉm tra v√† x·ª≠ l√Ω video
        print(f"[ANALYZE-STORE] Step 2: Checking video file...")
        if not os.path.exists(output_path):
            print(f"[ANALYZE-STORE] ERROR: Video file not found at: {output_path}")
            return jsonify({
                'success': False,
                'message': f'Video file not found at: {output_path}'
            }), 404
            
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size_mb = os.path.getsize(output_path) / (1024 * 1024)
        print(f"[ANALYZE-STORE] Video file size: {file_size_mb:.2f} MB")
        
        # B∆∞·ªõc 3: Ph√¢n t√≠ch video
        print(f"[ANALYZE-STORE] Step 3: Analyzing video...")
        analysis_start_time = time.time()
        
        # T·∫°o prompt cho ph√¢n t√≠ch
        prompt = """ B·∫°n l√† chuy√™n gia v·ªÅ t·ªëi ∆∞u trang s·∫£n ph·∫©m e-commerce. H√£y ph√¢n t√≠ch k·ªπ c·∫•u tr√∫c v√† n·ªôi dung c·ªßa trang s·∫£n ph·∫©m hi·ªán t·∫°i.

            **Y√™u c·∫ßu chi ti·∫øt (tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát):**

            1. **Nh·∫≠n di·ªán c√°c m·ª•c tr√™n trang s·∫£n ph·∫©m**:
                - Li·ªát k√™ v√† ƒë·∫∑t t√™n r√µ r√†ng, logic cho t·ª´ng ph·∫ßn n·ªôi dung c√≥ tr√™n trang s·∫£n ph·∫©m hi·ªán t·∫°i (VD: Banner ch√≠nh, M√¥ t·∫£ s·∫£n ph·∫©m, ƒê√°nh gi√° kh√°ch h√†ng, v.v.)

            2. **ƒê√°nh gi√° t·ª´ng m·ª•c**:
                V·ªõi m·ªói m·ª•c v·ª´a nh·∫≠n di·ªán, ƒë∆∞a ra:
                - ƒêi·ªÉm ƒë√°nh gi√° t·ª´ 1-10 d·ª±a tr√™n c√°c ti√™u ch√≠: r√µ r√†ng, thuy·∫øt ph·ª•c, t√≠nh li√™n quan, hi·ªáu qu·∫£ SEO, kh·∫£ nƒÉng chuy·ªÉn ƒë·ªïi.
                - Ph√¢n t√≠ch ng·∫Øn g·ªçn v·ªÅ ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu.
                - ƒê·ªÅ xu·∫•t c·∫£i thi·ªán (n·∫øu c√≥).

            3. **Benchmarking (So s√°nh chu·∫©n)**:
                - So s√°nh c·∫•u tr√∫c trang s·∫£n ph·∫©m hi·ªán t·∫°i v·ªõi c√°c trang s·∫£n ph·∫©m hi·ªáu qu·∫£ cao (VD: Amazon, Shopify, c√°c th∆∞∆°ng hi·ªáu DTC n·ªïi b·∫≠t).
                - T√≥m t·∫Øt r√µ r√†ng c√°c ph·∫ßn thi·∫øu ho·∫∑c th·ª´a tr√™n trang hi·ªán t·∫°i.

            4. **ƒê·ªÅ xu·∫•t c·∫•u tr√∫c trang s·∫£n ph·∫©m t·ªëi ∆∞u**:
                - ƒê·ªÅ xu·∫•t c·∫•u tr√∫c l√Ω t∆∞·ªüng (t√™n t·ª´ng m·ª•c, th·ª© t·ª± s·∫Øp x·∫øp v√† m·ª•c ƒë√≠ch) nh·∫±m t·ªëi ∆∞u h√≥a SEO v√† tƒÉng t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi.

            5. **Vi·∫øt l·∫°i n·ªôi dung s·∫£n ph·∫©m**:
                - D·ª±a tr√™n ƒë√°nh gi√° v√† c·∫•u tr√∫c ƒë·ªÅ xu·∫•t, vi·∫øt l·∫°i n·ªôi dung trang s·∫£n ph·∫©m.
                - ƒê·∫£m b·∫£o n·ªôi dung m·ªõi t·ªëi ∆∞u SEO, th√∫c ƒë·∫©y chuy·ªÉn ƒë·ªïi, v√† gi·ªØ nguy√™n phong c√°ch th∆∞∆°ng hi·ªáu.

            6. **G·ª£i √Ω l√†m video gi·ªõi thi·ªáu s·∫£n ph·∫©m**:
                - ƒê∆∞a ra m·ªôt k·ªãch b·∫£n video ng·∫Øn kho·∫£ng 1 ph√∫t, gi·ªõi thi·ªáu s·∫£n ph·∫©m theo phong c√°ch h·∫•p d·∫´n, hi·ªáu qu·∫£.
                - Do ƒë√¢y l√† s·∫£n ph·∫©m dropshipping, hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m trong tay, h√£y g·ª£i √Ω c·ª• th·ªÉ c√°ch l√†m video m√† kh√¥ng c·∫ßn s·∫£n ph·∫©m v·∫≠t l√Ω (VD: s·ª≠ d·ª•ng h√¨nh ·∫£nh, video m·∫´u, ƒë·ªì h·ªça, stock footage).

            ---

            **Y√™u c·∫ßu ƒë·∫∑c bi·ªát v·ªÅ ƒë·ªãnh d·∫°ng ƒë·∫ßu ra**:
            Tr·∫£ l·ªùi to√†n b·ªô n·ªôi dung ·ªü tr√™n b·∫±ng ti·∫øng Vi·ªát v√† theo ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:

            ```json
            {
                "nhan_dien_cac_muc": [
                    {
                        "ten_muc": "T√™n m·ª•c c·ª• th·ªÉ",
                        "diem_danh_gia": 1-10,
                        "phan_tich": "ƒêi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu",
                        "goi_y_cai_thien": "C√°ch c·∫£i thi·ªán m·ª•c n√†y"
                    }
                ],
                "benchmarking": {
                    "phan_thieu": ["Danh s√°ch c√°c m·ª•c thi·∫øu"],
                    "phan_thua": ["Danh s√°ch c√°c m·ª•c th·ª´a"],
                    "so_sanh_chung": "T√≥m t·∫Øt so s√°nh ng·∫Øn g·ªçn"
                },
                "cau_truc_trang_toi_uu": [
                    {
                        "ten_muc": "T√™n m·ª•c ƒë·ªÅ xu·∫•t",
                        "thu_tu": "V·ªã tr√≠ m·ª•c trong trang (VD: 1, 2, 3...)",
                        "muc_dich": "M·ª•c ƒë√≠ch c·ª• th·ªÉ c·ªßa m·ª•c n√†y"
                    }
                ],
                "noi_dung_viet_lai": "To√†n b·ªô n·ªôi dung s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c vi·∫øt l·∫°i, t·ªëi ∆∞u SEO, chuy·ªÉn ƒë·ªïi v√† gi·ªØ nguy√™n gi·ªçng th∆∞∆°ng hi·ªáu",
                "goi_y_video_1_phut": {
                    "kich_ban": "K·ªãch b·∫£n c·ª• th·ªÉ video trong 1 ph√∫t",
                    "cach_thuc_thuc_hien": "C√°ch l√†m video m√† kh√¥ng c√≥ s·∫£n ph·∫©m v·∫≠t l√Ω (stock video, h√¨nh ·∫£nh minh h·ªça, motion graphics,...)"
                }
            }

        """

        
        # G·ªçi API analyze_video ƒë·ªÉ ph√¢n t√≠ch
        print("[ANALYZE-STORE] Calling analyze_video function...")
        analysis_result = analyze_video(output_path, prompt)
        
        if analysis_result.get('error'):
            print(f"[ANALYZE-STORE] ERROR: {analysis_result['analysis']}")
            return jsonify({
                'success': False,
                'message': analysis_result['analysis']
            }), 500
            
        analysis_end_time = time.time()
        analysis_duration = analysis_end_time - analysis_start_time
        print(f"[ANALYZE-STORE] Analysis completed in {analysis_duration:.2f} seconds")
        
        # B∆∞·ªõc 4: Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m v√† l∆∞u k·∫øt qu·∫£
        print("[ANALYZE-STORE] Step 4: Extracting product name and saving results...")
        product_name = "Website Analysis"
        for line in analysis_result['analysis'].split('\n'):
            if line.startswith("PRODUCT NAME:"):
                product_name = line.replace("PRODUCT NAME:", "").strip()
                break
        print(f"[ANALYZE-STORE] Extracted product name: {product_name}")
                
        # T·∫°o ID duy nh·∫•t cho ph√¢n t√≠ch n√†y
        analysis_id = str(next_store_analytics_id)
        next_store_analytics_id += 1
        print(f"[ANALYZE-STORE] Generated analysis ID: {analysis_id}")
        
        # L∆∞u ph√¢n t√≠ch v·ªõi metadata
        store_analytics[analysis_id] = {
            'id': analysis_id,
            'url': url,
            'product_name': product_name,
            'analysis': analysis_result['analysis'],
            'video_path': f'/output/{os.path.basename(output_path)}',
            'creation_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'timestamp': datetime.now().timestamp()
        }
        print("[ANALYZE-STORE] Analysis saved successfully")
        
        # Save to file after adding new analysis
        save_analytics()
        
        # Tr√≠ch xu·∫•t ƒëi·ªÉm s·ªë v√† th√¥ng tin cho dashboard
        print("[ANALYZE-STORE] Step 5: Extracting scores for dashboard...")
        criteria_scores, total_score, grade = extract_scores_from_text(analysis_result['analysis'])
        
        print("[ANALYZE-STORE] Process completed successfully!")
        return jsonify({
            'success': True,
            'analysis_id': analysis_id,
            'product_name': product_name,
            'url': url,
            'creation_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'score': total_score,
            'grade': grade
        })
            
    except Exception as e:
        print(f"[ANALYZE-STORE] ERROR: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500

@app.route('/view_report/<analysis_id>')
def view_report(analysis_id):
    """
    Hi·ªÉn th·ªã dashboard cho m·ªôt ph√¢n t√≠ch c·ª• th·ªÉ
    """
    try:
        if analysis_id not in store_analytics:
            return "Analysis not found", 404
            
        analysis = store_analytics[analysis_id]
        criteria_scores, total_score, grade = extract_scores_from_text(analysis['analysis'])
        
        return render_template("dashboard.html",
            product_name=analysis['product_name'],
            url=analysis['url'],
            score=total_score,
            grade=grade,
            criteria=criteria_scores,
            analysis_summary=analysis['analysis']
        )
    except Exception as e:
        print(f"[VIEW-REPORT] ERROR: {str(e)}")
        return str(e), 500

def analyze_video(video_path, custom_prompt=""):
    """
    Ph√¢n t√≠ch video s·ª≠ d·ª•ng Google Gemini API.
    Cho ph√©p s·ª≠ d·ª•ng prompt t√πy ch·ªânh n·∫øu ƒë∆∞·ª£c cung c·∫•p.
    """
    print("\n[ANALYZE-VIDEO] Starting video analysis process...")
    print(f"[ANALYZE-VIDEO] Video path: {video_path}")
    
    try:
        # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n video h·ª£p l·ªá
        absolute_video_path = os.path.abspath(video_path)
        print(f"[ANALYZE-VIDEO] Absolute video path: {absolute_video_path}")
        
        if not os.path.exists(absolute_video_path):
            print(f"[ANALYZE-VIDEO] ERROR: Video file not found at {absolute_video_path}")
            return {
                "product_name": "Unknown",
                "analysis": f"Error: Video file not found at {absolute_video_path}",
                "error": True
            }
        
        # ƒê·ªçc video file
        print("[ANALYZE-VIDEO] Reading video file...")
        with open(absolute_video_path, 'rb') as video_file:
            video_data = video_file.read()
        print(f"[ANALYZE-VIDEO] Video file size: {len(video_data) / (1024*1024):.2f} MB")
        
        # X√°c ƒë·ªãnh MIME type
        mime_type = "video/mp4"
        if absolute_video_path.lower().endswith('.avi'):
            mime_type = "video/avi"
        print(f"[ANALYZE-VIDEO] MIME type: {mime_type}")
        
        # T·∫°o prompt m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ prompt t√πy ch·ªânh
        if not custom_prompt:
            custom_prompt = """H√£y ph√¢n t√≠ch trang web b√°n s·∫£n ph·∫©m n√†y v√† cung c·∫•p th√¥ng tin sau:
            1. S·∫£n ph·∫©m ch√≠nh ƒë∆∞·ª£c b√°n l√† g√¨?
            2. ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng m·ª•c ti√™u m√† trang web h∆∞·ªõng ƒë·∫øn l√† ai?
            3. Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng tr√™n trang web n√†y nh∆∞ th·∫ø n√†o? (ƒêi·ªÅu h∆∞·ªõng, b·ªë c·ª•c, t·ªëc ƒë·ªô t·∫£i ∆∞·ªõc t√≠nh, t√≠nh th√¢n thi·ªán tr√™n thi·∫øt b·ªã di ƒë·ªông)
            4. Th√¥ng tin v·ªÅ s·∫£n ph·∫©m (m√¥ t·∫£, h√¨nh ·∫£nh, gi√° c·∫£) ƒë∆∞·ª£c tr√¨nh b√†y nh∆∞ th·∫ø n√†o?
            5. Ch√≠nh s√°ch b√°n h√†ng v√† v·∫≠n chuy·ªÉn c√≥ r√µ r√†ng v√† d·ªÖ hi·ªÉu kh√¥ng?
            6. M·ª©c ƒë·ªô tin c·∫≠y c·ªßa trang web (d·ª±a tr√™n c√°c y·∫øu t·ªë c√≥ th·ªÉ th·∫•y tr√™n trang).
            7. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán ƒë·ªÉ tƒÉng doanh s·ªë v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng (t·ªëi thi·ªÉu 3 ƒë·ªÅ xu·∫•t c·ª• th·ªÉ)"""
            print("[ANALYZE-VIDEO] Using default prompt")
        else:
            print("[ANALYZE-VIDEO] Using custom prompt")
        
        # In ra prompt s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng
        print("\n[ANALYZE-VIDEO] Prompt to be sent to Gemini:")
        print("-" * 50)
        print(custom_prompt)
        print("-" * 50)
        
        # T·∫°o contents array v·ªõi prompt v√† video
        print("\n[ANALYZE-VIDEO] Preparing content for Gemini API...")
        contents = [
            custom_prompt,
            types.Part(inline_data=types.Blob(
                mime_type=mime_type,
                data=video_data
            ))
        ]
        
        # In ra th√¥ng tin v·ªÅ contents
        print(f"[ANALYZE-VIDEO] Content structure:")
        print(f"- Number of parts: {len(contents)}")
        print(f"- Part 1: Text prompt (length: {len(custom_prompt)} characters)")
        print(f"- Part 2: Video data (size: {len(video_data) / (1024*1024):.2f} MB)")
        
        # G·ª≠i video ƒë·∫øn Gemini
        print("\n[ANALYZE-VIDEO] Sending request to Gemini API...")
        print(f"[ANALYZE-VIDEO] Model: gemini-2.0-flash-exp")
        print(f"[ANALYZE-VIDEO] Response modalities: ['Text']")
        
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=contents,
            config=types.GenerateContentConfig(
                response_modalities=["Text"]
            ),
        )
        print("[ANALYZE-VIDEO] Received response from Gemini API")
        
        # L·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch
        print("\n[ANALYZE-VIDEO] Processing response...")
        analysis_result = ""
        for candidate in response.candidates:
            for part in candidate.content.parts:
                if part.text:
                    analysis_result = part.text
                    break
            if analysis_result:
                break
        
        print(f"[ANALYZE-VIDEO] Analysis result length: {len(analysis_result)} characters")
        print("\n[ANALYZE-VIDEO] Analysis result preview (first 200 chars):")
        print("-" * 50)
        print(analysis_result[:200] + "...")
        print("-" * 50)
        print("[ANALYZE-VIDEO] Analysis completed successfully!")
        
        return {
            "product_name": "Video Analysis",
            "analysis": analysis_result,
            "error": False
        }
        
    except Exception as e:
        print(f"[ANALYZE-VIDEO] ERROR: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return {
            "product_name": "Unknown",
            "analysis": f"Error analyzing video: {str(e)}",
            "error": True
        }

@app.route('/analyze_uploaded_video', methods=['POST'])
def analyze_uploaded_video():   
    """
    Ph√¢n t√≠ch video ƒë√£ t·∫£i l√™n b·∫±ng Gemini.
    """
    try:
        video_path = request.json.get('video_path')
        if not video_path or video_path not in UPLOADED_VIDEOS:
            return jsonify({'success': False, 'message': 'Invalid video path'}), 400
        
        # N·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch tr∆∞·ªõc ƒë√≥, tr·∫£ v·ªÅ lu√¥n
        if UPLOADED_VIDEOS[video_path]['has_analysis'] and UPLOADED_VIDEOS[video_path]['analysis']:
            return jsonify({
                'success': True,
                'analysis': UPLOADED_VIDEOS[video_path]['analysis']
            })
        
        # L·∫•y prompt t√πy ch·ªânh n·∫øu c√≥
        custom_prompt = UPLOADED_VIDEOS[video_path].get('analysis_prompt', '')
        
        # Ph√¢n t√≠ch video b·∫±ng h√†m analyze_video
        print(f"Analyzing uploaded video: {video_path}")
        analysis_result = analyze_video(video_path, custom_prompt)
        
        if analysis_result.get('error'):
            return jsonify({
                'success': False,
                'message': analysis_result['analysis']
            }), 500
        
        # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
        UPLOADED_VIDEOS[video_path]['has_analysis'] = True
        UPLOADED_VIDEOS[video_path]['analysis'] = analysis_result['analysis']
        
        return jsonify({
            'success': True,
            'analysis': analysis_result['analysis']
        })
    
    except Exception as e:
        print(f"Error analyzing uploaded video: {str(e)}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/upload_video', methods=['POST'])
def upload_video():
    try:
        if 'videoFile' not in request.files:
            return jsonify({'success': False, 'message': 'No video file provided'}), 400
        
        video_file = request.files['videoFile']
        if video_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file'}), 400
        
        if video_file and allowed_file(video_file.filename):
            filename = secure_filename(video_file.filename)
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            video_file.save(file_path)
            
            # L∆∞u th√¥ng tin video
            UPLOADED_VIDEOS[file_path] = {
                'name': filename,
                'path': file_path,
                'has_analysis': False,
                'analysis': None,
                'analysis_prompt': request.form.get('analysisPrompt', ''),
                'upload_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            }
            
            return jsonify({
                'success': True,
                'message': 'Video uploaded successfully',
                'video_path': file_path
            })
        
        return jsonify({'success': False, 'message': 'Invalid file type'}), 400
    
    except Exception as e:
        print(f"Error uploading video: {str(e)}")
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/uploaded_videos', methods=['GET'])
def get_uploaded_videos():
    try:
        videos = []
        for video_path, video_info in UPLOADED_VIDEOS.items():
            if os.path.exists(video_path):
                videos.append({
                    'name': video_info['name'],
                    'path': video_info['path'],
                    'has_analysis': video_info['has_analysis'],
                    'upload_time': video_info['upload_time']
                })
        return jsonify(videos)
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/optimize_image', methods=['POST'])
def optimize_image():
    try:
        if 'image' not in request.files:
            return jsonify({'success': False, 'message': 'No image file provided'})
        
        image_file = request.files['image']
        prompt = request.form.get('prompt', '')
        
        if image_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file'})
        
        # Read the image file
        image_data = image_file.read()
        
        # Convert image to base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # Prepare the prompt for Gemini
        full_prompt = f"{prompt}\n\nPlease process this image and return the result as a base64-encoded PNG image."
        
        # Call Gemini API with correct syntax
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=[
                full_prompt,
                types.Part(inline_data=types.Blob(
                    mime_type="image/png",
                    data=image_data
                ))
            ],
            config=types.GenerateContentConfig(
                response_modalities=["Text", "Image"]
            )
        )
        
        # Extract the base64 image from the response
        result_image = None
        for candidate in response.candidates:
            for part in candidate.content.parts:
                if part.inline_data and part.inline_data.mime_type == "image/png":
                    result_image = base64.b64encode(part.inline_data.data).decode('utf-8')
                    break
            if result_image:
                break
        
        if not result_image:
            return jsonify({'success': False, 'message': 'No image response from Gemini API'})
        
        # L∆∞u k·∫øt qu·∫£ v√†o optimize_image_data
        result_id = str(optimize_image_data['next_id'])
        optimize_image_data['next_id'] += 1
        
        optimize_image_data['results'][result_id] = {
            'id': result_id,
            'original_image': image_base64,
            'result_image': result_image,
            'prompt': prompt,
            'timestamp': datetime.now().timestamp(),
            'creation_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        }
        
        # L∆∞u v√†o file
        save_optimize_image_data()
        
        return jsonify({
            'success': True,
            'image': result_image,
            'id': result_id
        })
            
    except Exception as e:
        print(f"Error in optimize_image: {str(e)}")
        return jsonify({'success': False, 'message': str(e)})

@app.route('/optimize_background_with_ai', methods=['POST'])
def optimize_background_with_ai():
    try:
        if 'image' not in request.files:
            return jsonify({'success': False, 'message': 'No image file provided'})
        
        image_file = request.files['image']
        prompt = request.form.get('prompt', '')
        
        if image_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file'})
        
        # Read the image file
        image_data = image_file.read()
        
        # Call Gemini API with the generated prompt
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=[
                prompt,
                types.Part(inline_data=types.Blob(
                    mime_type="image/png",
                    data=image_data
                ))
            ],
            config=types.GenerateContentConfig(
                response_modalities=["Text", "Image"]
            )
        )
        
        # Extract the base64 image from the response
        result_image = None
        for candidate in response.candidates:
            for part in candidate.content.parts:
                if part.inline_data and part.inline_data.mime_type == "image/png":
                    result_image = base64.b64encode(part.inline_data.data).decode('utf-8')
                    break
            if result_image:
                break
        
        if not result_image:
            return jsonify({'success': False, 'message': 'No image response from Gemini API'})
        
        # L∆∞u k·∫øt qu·∫£ v√†o optimize_image_data
        result_id = str(optimize_image_data['next_id'])
        optimize_image_data['next_id'] += 1
        
        optimize_image_data['results'][result_id] = {
            'id': result_id,
            'original_image': base64.b64encode(image_data).decode('utf-8'),
            'result_image': result_image,
            'prompt': prompt,
            'timestamp': datetime.now().timestamp(),
            'creation_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        }
        
        # L∆∞u v√†o file
        save_optimize_image_data()
        
        return jsonify({
            'success': True,
            'image': result_image,
            'id': result_id
        })
            
    except Exception as e:
        print(f"Error in optimize_background_with_ai: {str(e)}")
        return jsonify({'success': False, 'message': str(e)})

@app.route('/optimize_image_results', methods=['GET'])
def get_optimize_image_results():
    # Convert results dictionary to list and sort by timestamp
    results_list = []
    for result_id, result in optimize_image_data['results'].items():
        result['id'] = result_id
        results_list.append(result)
    
    # Sort by timestamp in descending order (newest first)
    results_list.sort(key=lambda x: x['timestamp'], reverse=True)
    
    return jsonify(results_list)

@app.route('/generate_video', methods=['POST'])
def generate_video():
    try:
        # Get uploaded files
        images = request.files.getlist('images')
        image_urls = request.form.getlist('image_urls')
        
        if not images and not image_urls:
            return jsonify({'success': False, 'message': 'No images provided'})
        
        # Create output directory if it doesn't exist
        output_dir = os.path.join(app.root_path, 'static', 'output')
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate unique filename
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_path = os.path.join(output_dir, f'video_{timestamp}.mp4')
        
        # Process images
        image_files = []
        
        # Process uploaded files
        for image in images:
            if image.filename:
                image_files.append(image)
        
        # Process URLs
        for url in image_urls:
            try:
                response = requests.get(url)
                if response.status_code == 200:
                    # Create a temporary file
                    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.png')
                    temp_file.write(response.content)
                    temp_file.close()
                    image_files.append(open(temp_file.name, 'rb'))
            except Exception as e:
                print(f"Error processing URL {url}: {str(e)}")
        
        if not image_files:
            return jsonify({'success': False, 'message': 'No valid images to process'})
        
        # Create video from images
        first_image = Image.open(image_files[0])
        width, height = first_image.size
        
        # Create video writer
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, 1.0, (width, height))
        
        # Add each image to the video
        for image_file in image_files:
            # Convert PIL Image to OpenCV format
            img = Image.open(image_file)
            img = img.convert('RGB')
            img_cv = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
            
            # Write frame
            out.write(img_cv)
            
            # Add a black frame for transition
            black_frame = np.zeros((height, width, 3), dtype=np.uint8)
            out.write(black_frame)
        
        # Release video writer
        out.release()
        
        # Convert to MP4 using ffmpeg
        temp_output = output_path.replace('.mp4', '_temp.mp4')
        os.rename(output_path, temp_output)
        
        subprocess.run([
            'ffmpeg', '-i', temp_output,
            '-c:v', 'libx264',
            '-preset', 'medium',
            '-crf', '23',
            output_path
        ])
        
        # Remove temporary file
        os.remove(temp_output)
        
        # Return the video path
        return jsonify({
            'success': True,
            'video_path': f'/static/output/video_{timestamp}.mp4'
        })
        
    except Exception as e:
        print(f"Error in generate_video: {str(e)}")
        return jsonify({'success': False, 'message': str(e)})

@app.route('/generate_ai_prompt', methods=['POST'])
def generate_ai_prompt():
    try:
        if 'image' not in request.files:
            return jsonify({'success': False, 'message': 'No image file provided'})
        
        image_file = request.files['image']
        if image_file.filename == '':
            return jsonify({'success': False, 'message': 'No selected file'})
        
        # Read the image file
        image_data = image_file.read()
        print("\n[GEMINI-API] Image size:", len(image_data), "bytes")
        
        # Prepare the prompt for Gemini
        prompt = """B·∫°n h√£y xem b·ª©c ·∫£nh n√†y v√† x√°c ƒë·ªãnh s·∫£n ph·∫©m trong ·∫£nh l√† g√¨, ƒë·ªìng th·ªùi ph√¢n t√≠ch key feature n·ªïi b·∫≠t nh·∫•t c·ªßa s·∫£n ph·∫©m ƒë√≥ (bao g·ªìm c√¥ng nƒÉng, ch·∫•t li·ªáu, ƒë·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng, phong c√°ch thi·∫øt k·∫ø). Sau ƒë√≥, h√£y t·∫°o m·ªôt prompt ƒë·ªÉ t·ªëi ∆∞u l·∫°i h√¨nh ·∫£nh s·∫£n ph·∫©m, d·ª±a tr√™n key feature v·ª´a ph√¢n t√≠ch.

‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:
Ch·ªâ ch·ªçn b·ªëi c·∫£nh t·ªëi ∆∞u ph√π h·ª£p v·ªõi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng th·ª±c t·∫ø v√† c·∫£m x√∫c kh√°ch h√†ng m·ª•c ti√™u.
Kh√¥ng ƒë·∫∑t s·∫£n ph·∫©m v√†o b·ªëi c·∫£nh sai c√¥ng nƒÉng (v√≠ d·ª•: m√≥c kh√≥a th√∫ b√¥ng d√πng ƒë·ªÉ treo t√∫i, ba l√¥ ho·∫∑c s∆∞u t·∫≠p ‚Äî kh√¥ng ph√π h·ª£p n·∫øu ƒë·∫∑t tr√™n b√†n l√†m vi·ªác vƒÉn ph√≤ng).

‚ö†Ô∏è C·∫£nh b√°o th√™m:
V·ªõi c√°c s·∫£n ph·∫©m trang s·ª©c ho·∫∑c ph·ª• ki·ªán ƒëeo tr√™n ng∆∞·ªùi (v√≠ d·ª•: nh·∫´n, v√≤ng c·ªï, v√≤ng tay, b√¥ng tai), h√¨nh ·∫£nh c·∫ßn c√≥ ng∆∞·ªùi m·∫´u th·∫≠t v·ªõi k·∫øt c·∫•u da r√µ r√†ng, √°nh s√°ng th·∫≠t, b√≥ng ƒë·ªï t·ª± nhi√™n, t√≥c th·∫≠t ho·∫∑c ƒë∆∞·ª£c x·ª≠ l√Ω tinh t·∫ø.
Tr√°nh m·ªçi h√¨nh ·∫£nh "m·ªãn b·∫•t th∆∞·ªùng", kh√¥ng c√≥ l·ªó ch√¢n l√¥ng, thi·∫øu chi ti·∫øt da, thi·∫øu shadow, ho·∫∑c b·ªã "AI ho√°" g√¢y c·∫£m gi√°c kh√¥ng ch√¢n th·ª±c. V√≠ d·ª• ƒë√∫ng 1 ‚Äì M√≥c kh√≥a th√∫ b√¥ng:
"H√£y t·ªëi ∆∞u l·∫°i background c·ªßa s·∫£n ph·∫©m n√†y th√†nh m·ªôt chi·∫øc balo h·ªçc sinh ho·∫∑c t√∫i x√°ch n·ªØ trong b·ªëi c·∫£nh ƒë·ªùi s·ªëng th∆∞·ªùng ng√†y nh∆∞ tr∆∞·ªùng h·ªçc, qu√°n c√† ph√™, ho·∫∑c chuy·∫øn du l·ªãch. Treo s·∫£n ph·∫©m ·ªü v·ªã tr√≠ d·ªÖ nh√¨n, th·ªÉ hi·ªán r√µ k√≠ch th∆∞·ªõc th·∫≠t, gi·ªØ nguy√™n m√†u s·∫Øc v√† ch·∫•t li·ªáu l√¥ng b√¥ng m·ªÅm m·∫°i. √Ånh s√°ng ch√¢n th·ª±c, kh√¥ng d√πng hi·ªáu ·ª©ng ho·∫°t h√¨nh hay nh√¢n t·∫°o.
V·ªõi c√°c s·∫£n ph·∫©m c√≥ k√≠ch th∆∞·ªõc c·ª• th·ªÉ nh∆∞ t√∫i x√°ch, balo, tranh, ƒë√®n, ƒë·ªì n·ªôi th·∫•t, ph·ª• ki·ªán ƒëeo, h√¨nh ·∫£nh ph·∫£i th·ªÉ hi·ªán ƒë√∫ng t·ª∑ l·ªá k√≠ch th∆∞·ªõc th·ª±c t·∫ø khi ƒë·∫∑t c·∫°nh ng∆∞·ªùi ho·∫∑c v·∫≠t th·ªÉ xung quanh (tay, ng∆∞·ªùi, b√†n gh·∫ø...).
Kh√¥ng ƒë∆∞·ª£c ph√≥ng to ho·∫∑c thu nh·ªè g√¢y sai l·ªách c·∫£m nh·∫≠n v·ªÅ k√≠ch th∆∞·ªõc th·∫≠t, l√†m gi·∫£m ƒë·ªô tin c·∫≠y s·∫£n ph·∫©m.    "

V√≠ d·ª• ƒë√∫ng 2 ‚Äì Nh·∫´n kim c∆∞∆°ng:
"H√£y ƒë·∫∑t chi·∫øc nh·∫´n kim c∆∞∆°ng n√†y l√™n ng√≥n tay c·ªßa m·ªôt ng∆∞·ªùi th·∫≠t trong b·ªëi c·∫£nh bu·ªïi h·∫πn t·ªëi l√£ng m·∫°n t·∫°i nh√† h√†ng sang tr·ªçng. Tay ng∆∞·ªùi ph·∫£i ch√¢n th·ª±c, c√≥ k·∫øt c·∫•u da t·ª± nhi√™n, √°nh s√°ng ·∫•m nh·∫π t·ª´ n·∫øn ho·∫∑c ƒë√®n t·∫°o ph·∫£n chi·∫øu l·∫•p l√°nh l√™n nh·∫´n. Nh·∫´n c·∫ßn ƒë∆∞·ª£c ch·ª•p r√µ n√©t, n·ªïi b·∫≠t tr√™n tay, th·ªÉ hi·ªán ƒë∆∞·ª£c ƒë·ªô chi ti·∫øt c·ªßa ƒë√° v√† √°nh kim lo·∫°i. T·ªïng th·ªÉ h√¨nh ·∫£nh ph·∫£i mang phong c√°ch ch·ª•p ·∫£nh th·ª±c t·∫ø (photorealistic), kh√¥ng s·ª≠ d·ª•ng hi·ªáu ·ª©ng ho·∫°t h√¨nh ho·∫∑c phong c√°ch AI."

V√≠ d·ª• ƒë√∫ng 3 ‚Äì V√≤ng c·ªï:
"H√£y ƒë·∫∑t chi·∫øc v√≤ng c·ªï n√†y l√™n c·ªï c·ªßa m·ªôt ng∆∞·ªùi ph·ª• n·ªØ trong b·ªëi c·∫£nh d·ª± ti·ªác bu·ªïi t·ªëi ho·∫∑c s·ª± ki·ªán trang tr·ªçng. √Ånh s√°ng d·ªãu nh·∫π l√†m n·ªïi b·∫≠t ch·∫•t li·ªáu kim lo·∫°i v√† ƒë√° qu√Ω. C·ªï v√† ph·∫ßn da xung quanh ph·∫£i ch√¢n th·ª±c, c√≥ k·∫øt c·∫•u r√µ r√†ng. Chi·∫øc v√≤ng c·∫ßn ƒë∆∞·ª£c ch·ª•p c·∫≠n ƒë·ªÉ th·ªÉ hi·ªán s·ª± tinh x·∫£o c·ªßa thi·∫øt k·∫ø v√† ƒë·ªô b√≥ng s√°ng."

V√≠ d·ª• ƒë√∫ng 4 ‚Äì B√¥ng tai (c∆° b·∫£n):
"H√£y ƒëeo ƒë√¥i b√¥ng tai n√†y l√™n tai c·ªßa m·ªôt ng∆∞·ªùi th·∫≠t, trong b·ªëi c·∫£nh √°nh s√°ng t·ª± nhi√™n ho·∫∑c khung c·∫£nh ti·ªác c∆∞·ªõi, fashion show, ho·∫∑c street style hi·ªán ƒë·∫°i. Khu√¥n m·∫∑t ho·∫∑c g√≥c nghi√™ng c·∫ßn th·ªÉ hi·ªán r√µ ph·∫ßn tai, t√≥c th·∫≠t v√† l√†n da c√≥ k·∫øt c·∫•u ch√¢n th·ª±c. B√¥ng tai c·∫ßn ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t v·ªÅ ch·∫•t li·ªáu, h√¨nh d√°ng v√† ƒë·ªô long lanh. ·∫¢nh mang phong c√°ch ch·ª•p th·ªùi trang cao c·∫•p, kh√¥ng d√πng hi·ªáu ·ª©ng ·∫£o."

V√≠ d·ª• ƒë√∫ng 9 ‚Äì B√¥ng tai (n√¢ng cao ‚Äì ch·ªëng AI look):
"H√£y ƒëeo ƒë√¥i b√¥ng tai n√†y l√™n tai c·ªßa m·ªôt ng∆∞·ªùi th·∫≠t trong b·ªëi c·∫£nh √°nh s√°ng d·ªãu nh·∫π c·ªßa m·ªôt bu·ªïi ti·ªác t·ªëi ho·∫∑c s·ª± ki·ªán ƒë·∫∑c bi·ªát. T√≥c n√™n ƒë∆∞·ª£c b√∫i cao ho·∫∑c v√©n g·ªçn ƒë·ªÉ l·ªô to√†n b·ªô tai. Khu√¥n m·∫∑t ho·∫∑c g√≥c nghi√™ng c·∫ßn th·ªÉ hi·ªán r√µ k·∫øt c·∫•u da th·∫≠t nh∆∞ l·ªó ch√¢n l√¥ng, √°nh s√°ng ph·∫£n chi·∫øu nh·∫π v√† b√≥ng ƒë·ªï t·ª± nhi√™n. B√¥ng tai ph·∫£i g·∫Øn r√µ r√†ng, n·ªïi b·∫≠t tr√™n tai. H√¨nh ·∫£nh c·∫ßn mang phong c√°ch ch·ª•p ch√¢n dung th·∫≠t (photorealistic), kh√¥ng l√†m m·ªãn da qu√° m·ª©c, kh√¥ng s·ª≠ d·ª•ng hi·ªáu ·ª©ng ho·∫°t h√¨nh ho·∫∑c AI."

V√≠ d·ª• ƒë√∫ng 5 ‚Äì Tranh treo t∆∞·ªùng:
"H√£y treo b·ª©c tranh n√†y l√™n t∆∞·ªùng c·ªßa m·ªôt kh√¥ng gian ph√≤ng kh√°ch hi·ªán ƒë·∫°i ho·∫∑c studio ngh·ªá thu·∫≠t. T∆∞·ªùng n√™n c√≥ ch·∫•t li·ªáu g·∫°ch, b√™ t√¥ng ho·∫∑c g·ªó, √°nh s√°ng nh·∫π t·ª´ c·ª≠a s·ªï ho·∫∑c ƒë√®n t∆∞·ªùng l√†m n·ªïi b·∫≠t chi ti·∫øt v√† m√†u s·∫Øc tranh. Tranh ph·∫£i ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng t·ª∑ l·ªá v·ªõi kh√¥ng gian v√† n·ªôi th·∫•t xung quanh, t·∫°o c·∫£m gi√°c h√†i h√≤a v√† sang tr·ªçng."

V√≠ d·ª• ƒë√∫ng 6 ‚Äì V√≤ng tay phong c√°ch:
"H√£y ƒëeo chi·∫øc v√≤ng tay n√†y l√™n c·ªï tay c·ªßa m·ªôt ng∆∞·ªùi th·∫≠t trong khung c·∫£nh ƒë·ªùi s·ªëng h·∫±ng ng√†y nh∆∞ qu√°n c√† ph√™, bu·ªïi h·∫πn, ho·∫∑c khi ƒëang d√πng ƒëi·ªán tho·∫°i. Tay v√† l√†n da ph·∫£i ch√¢n th·ª±c, c√≥ k·∫øt c·∫•u r√µ r√†ng. V√≤ng tay c·∫ßn ƒë∆∞·ª£c l√†m n·ªïi b·∫≠t ·ªü v·ªã tr√≠ trung t√¢m, √°nh s√°ng t·ª± nhi√™n ph·∫£n chi·∫øu nh·∫π nh√†ng ƒë·ªÉ th·∫•y r√µ ch·∫•t li·ªáu v√† chi ti·∫øt thi·∫øt k·∫ø."

V√≠ d·ª• ƒë√∫ng 7 ‚Äì ƒê√®n decor ngh·ªá thu·∫≠t:
"H√£y ƒë·∫∑t chi·∫øc ƒë√®n decor n√†y trong m·ªôt kh√¥ng gian n·ªôi th·∫•t nh∆∞ ph√≤ng kh√°ch, ph√≤ng ng·ªß ho·∫∑c studio c√° nh√¢n. B·ªëi c·∫£nh c·∫ßn c√≥ √°nh s√°ng d·ªãu ƒë·ªÉ ƒë√®n ph√°t s√°ng r√µ r√†ng, l√†m n·ªïi b·∫≠t h√¨nh d√°ng v√† m√†u s·∫Øc. Gi·ªØ ƒë√∫ng t·ªâ l·ªá gi·ªØa ƒë√®n v√† ƒë·ªì n·ªôi th·∫•t xung quanh ƒë·ªÉ th·ªÉ hi·ªán c√¥ng nƒÉng s·ª≠ d·ª•ng v√† t·∫°o c·∫£m gi√°c ·∫•m √°p, phong c√°ch s·ªëng hi·ªán ƒë·∫°i."

V√≠ d·ª• ƒë√∫ng 8 ‚Äì ƒê·ªì s∆∞u t·∫ßm nh·ªè (figure, m√¥ h√¨nh, ƒë·ªì ch∆°i ngh·ªá thu·∫≠t):
"H√£y tr∆∞ng b√†y m√≥n ƒë·ªì s∆∞u t·∫ßm n√†y tr√™n k·ªá g·ªó, t·ªß k√≠nh ho·∫∑c b√†n tr∆∞ng b√†y c√≥ ƒë√®n chi·∫øu nh·∫π, trong m·ªôt kh√¥ng gian c√° nh√¢n nh∆∞ g√≥c l√†m vi·ªác ho·∫∑c ph√≤ng tr∆∞ng b√†y ngh·ªá thu·∫≠t. Gi·ªØ nguy√™n k√≠ch th∆∞·ªõc th·ª±c t·∫ø, th·ªÉ hi·ªán r√µ ch·∫•t li·ªáu v√† chi ti·∫øt s·∫£n ph·∫©m. B·ªëi c·∫£nh c·∫ßn g·ª£i c·∫£m h·ª©ng 's∆∞u t·∫ßm' v√† ƒëam m√™ c√° nh√¢n, ·∫£nh mang phong c√°ch t·ª± nhi√™n ‚Äì kh√¥ng ho·∫°t h√¨nh h√≥a."

V√≠ d·ª• ƒë√∫ng 9 ‚Äì T√∫i x√°ch th·ªùi trang:
"H√£y ƒëeo chi·∫øc t√∫i x√°ch n√†y tr√™n vai ho·∫∑c c·∫ßm tay b·ªüi m·ªôt ng∆∞·ªùi th·∫≠t ƒëang di chuy·ªÉn trong b·ªëi c·∫£nh ƒë·ªùi th∆∞·ªùng nh∆∞ tr√™n ph·ªë, tr∆∞·ªõc qu√°n c√† ph√™, ho·∫∑c ·ªü tr∆∞·ªùng h·ªçc. T√∫i c·∫ßn ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng t·ª∑ l·ªá th·ª±c t·∫ø so v·ªõi c∆° th·ªÉ ng∆∞·ªùi m·∫´u, kh√¥ng b·ªã ph√≥ng to ho·∫∑c thu nh·ªè b·∫•t th∆∞·ªùng. √Ånh s√°ng t·ª± nhi√™n chi·∫øu v√†o ch·∫•t li·ªáu v·∫£i, th·ªÉ hi·ªán r√µ k·∫øt c·∫•u, m√†u s·∫Øc v√† ƒë·ªô ƒë·ª©ng d√°ng c·ªßa t√∫i. H√¨nh ·∫£nh c·∫ßn ch√¢n th·ª±c, kh√¥ng d√πng hi·ªáu ·ª©ng ho·∫°t h√¨nh, filter l√†m ·∫£o ho·∫∑c phong c√°ch AI."

V√≠ d·ª• sai c·∫ßn tr√°nh:
"H√£y ƒë·∫∑t s·∫£n ph·∫©m l√™n b√†n l√†m vi·ªác v·ªõi s√°ch v·ªü v√† t√°ch c√† ph√™" (sai c√¥ng nƒÉng, kh√¥ng h·ª£p l√Ω v·ªõi s·∫£n ph·∫©m d√πng ƒë·ªÉ treo ho·∫∑c mang theo).

Y√™u c·∫ßu cu·ªëi c√πng: ph·∫ßn k·∫øt qu·∫£ tr·∫£ v·ªÅ cho t√¥i ch·ªâ c·∫ßn ƒë√∫ng m·ªôt d√≤ng prompt nh∆∞ v√≠ d·ª• ƒë√∫ng tr√™n, kh√¥ng c·∫ßn ph√¢n t√≠ch hay di·ªÖn gi·∫£i th√™m."""
        
        print("\n[GEMINI-API] Sending request to Gemini:")
        print("Model: gemini-2.0-flash-exp")
        print("Prompt length:", len(prompt), "characters")
        print("Image size:", len(image_data), "bytes")
        
        # Call Gemini API to generate prompt
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=[
                prompt,
                types.Part(inline_data=types.Blob(
                    mime_type="image/png",
                    data=image_data
                ))
            ],
            config=types.GenerateContentConfig(
                response_modalities=["Text"]
            )
        )
        
        print("\n[GEMINI-API] Received response from Gemini:")
        print("Response type:", type(response))
        print("Has candidates:", hasattr(response, 'candidates'))
        if hasattr(response, 'candidates'):
            print("Number of candidates:", len(response.candidates))
        
        # Extract the prompt from the response
        generated_prompt = ""
        try:
            if response and hasattr(response, 'candidates'):
                for candidate in response.candidates:
                    print("\nProcessing candidate:")
                    print("Has content:", hasattr(candidate, 'content'))
                    if hasattr(candidate, 'content') and candidate.content:
                        print("Has parts:", hasattr(candidate.content, 'parts'))
                        if hasattr(candidate.content, 'parts'):
                            for part in candidate.content.parts:
                                print("Has text:", hasattr(part, 'text'))
                                if hasattr(part, 'text') and part.text:
                                    generated_prompt = part.text.strip()
                                    print("Found text:", generated_prompt[:100] + "..." if len(generated_prompt) > 100 else generated_prompt)
                                    break
                            if generated_prompt:
                                break
                    if generated_prompt:
                        break
        except Exception as e:
            print(f"\n[GEMINI-API] Error extracting prompt from response: {str(e)}")
            return jsonify({
                'success': False,
                'message': 'Error extracting prompt from API response'
            })
        
        if not generated_prompt:
            print("\n[GEMINI-API] No prompt generated from the API")
            return jsonify({
                'success': False,
                'message': 'No prompt generated from the API'
            })
        
        # Extract the actual prompt from the response
        try:
            # T√¨m v·ªã tr√≠ c·ªßa prompt trong text
            prompt_start = generated_prompt.lower().find("prompt:")
            if prompt_start != -1:
                # L·∫•y ph·∫ßn text sau "prompt:"
                generated_prompt = generated_prompt[prompt_start + 7:].strip()
                # Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
                if generated_prompt.startswith('"') and generated_prompt.endswith('"'):
                    generated_prompt = generated_prompt[1:-1]
                print("\n[GEMINI-API] Processed prompt:", generated_prompt)
        except Exception as e:
            print(f"\n[GEMINI-API] Error processing prompt text: {str(e)}")
            # If we can't process the prompt, return it as is
            pass
        
        return jsonify({
            'success': True,
            'prompt': generated_prompt
        })
            
    except Exception as e:
        print(f"\n[GEMINI-API] Error in generate_ai_prompt: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error generating prompt: {str(e)}'
        })

# Load optimize image data from file when starting up
def load_optimize_image_data():
    global optimize_image_data
    try:
        if os.path.exists(OPTIMIZE_IMAGE_FILE):
            with open(OPTIMIZE_IMAGE_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                optimize_image_data = data
                print(f"[STARTUP] Loaded {len(optimize_image_data['results'])} optimize image records")
    except Exception as e:
        print(f"[STARTUP] Error loading optimize image data: {str(e)}")
        optimize_image_data = {'next_id': 1, 'results': {}}

# Save optimize image data to file
def save_optimize_image_data():
    try:
        with open(OPTIMIZE_IMAGE_FILE, 'w', encoding='utf-8') as f:
            json.dump(optimize_image_data, f, ensure_ascii=False, indent=2)
        print(f"[SAVE] Saved {len(optimize_image_data['results'])} optimize image records")
    except Exception as e:
        print(f"[SAVE] Error saving optimize image data: {str(e)}")

@app.route('/api/openai', methods=['POST'])
def openai_endpoint():
    try:
        data = request.get_json()
        id = data.get('id')
        title = data.get('title')
        description = data.get('description')
        featured_media = data.get('featuredMedia')
        image = data.get('image')

        if not all([id, title, description]):
            print("‚ùå Error: Missing ID, title or description!")
            return jsonify({'error': 'Missing ID, title or description!'}), 400

        # Generate prompt
        prompt = generate_prompt(title, description, library_data, featured_media, image)
        print("üì© JSON Prompt sent to OpenAI:", prompt)

        # Call OpenAI API with new syntax
        response = openai.chat.completions.create(
            model="gpt-4o-mini",  # Using gpt-4o-mini model
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia content SEO vi·∫øt content cho c√°c s√†n ph·∫©m c·ªßa ecommerce."},
                {"role": "user", "content": prompt}
            ]
        )

        raw_content = response.choices[0].message.content
        # Clean up JSON response
        raw_content = raw_content.strip().replace('```json', '').replace('```', '').strip()

        try:
            ai_response = json.loads(raw_content)
            print("‚úÖ OpenAI returned valid JSON:", ai_response)
        except json.JSONDecodeError:
            print("‚ùå Invalid JSON:", raw_content)
            return jsonify({'error': 'OpenAI response is not valid JSON.'}), 500

        # Save to database
        save_response = requests.post(SAVE_PRODUCT_API, json={
            'id': id,
            # 'optimizedTitle': ai_response['optimizedTitle'],
            # 'optimizedDescription': ai_response['optimizedDescription'],
            'gridView': ai_response['gridView']
        })

        save_result = save_response.json()
        print("üì© Database save result:", save_result)

        return jsonify({
            'success': True,
            'message': 'AI data processed and saved to DB!',
            'data': ai_response['gridView'],
            'dbResult': save_result
        })

    except Exception as e:
        print(f"‚ùå Error calling OpenAI: {str(e)}")
        return jsonify({'error': 'Failed to fetch data from OpenAI'}), 500

@app.route('/api/openai/reviews', methods=['POST'])
def openai_reviews():
    try:
        data = request.get_json()
        id = data.get('id')
        title = data.get('title')
        description = data.get('description')
        featured_media = data.get('featuredMedia')

        if not all([id, title, description, featured_media]):
            return jsonify({'error': 'Missing required fields'}), 400

        review_prompt = f"""
        Answer in English.
            You are an expert eCommerce marketer, specializing in creating persuasive product highlights that significantly increase purchase conversions.

            üëâ Your task:
            1. Automatically identify the product category (e.g., Watches, Clothing, Beauty, Electronics...) based strictly on:
            - Title: {title}
            - Description: {description}
            - Media: {featured_media}

            2. Based on the identified category, generate a JSON array containing exactly 3 compelling product highlights designed explicitly to maximize conversion. Each highlight must have:
            - "title": a short, high-impact aspect crucial to buyers (e.g., Style, Comfort, Battery Life...), specifically relevant to the product category.
            - "comment": a persuasive, authentic-sounding customer comment (‚â§25 words), written in first-person perspective, highlighting specific benefits, emotional experiences, or practical advantages (include numbers, real-life scenarios, or sensory details).
            - "star": always "AI-generated review based on product details from multiple sources."

            üéØ Example titles by product category (customizable by AI):
            - Watches: Design, Strap Quality, Waterproofing
            - Clothing: Fabric Comfort, Stitching Quality, Vibrant Colors
            - Beauty: Scent, Visible Results, Natural Ingredients
            - Electronics: Performance, Durability, Battery Life

            üìå Desired JSON output:
            [
            {
                "title": "Strap Quality",
                "comment": "The stainless steel strap feels premium, no irritation even after wearing for 8 hours daily.",
                "star": "AI-generated review based on product details from multiple sources."
            },
            ...
            ]

            ‚ùó Return only the JSON array as specified. Do not include any additional text, notes, or markdown formatting.
        """

        # Call OpenAI API with new syntax
        response = openai.chat.completions.create(
            model="gpt-4o-mini",  # Using gpt-4o-mini model
            messages=[
                {"role": "system", "content": "B·∫°n l√† kh√°ch h√†ng ·∫©n danh ƒë·ªÉ l·∫°i review s·∫£n ph·∫©m."},
                {"role": "user", "content": review_prompt}
            ]
        )

        raw_content = response.choices[0].message.content
        raw_content = raw_content.strip().replace('```json', '').replace('```', '').strip()

        try:
            ai_reviews = json.loads(raw_content)
            
            # Save to database
            save_response = requests.post(SAVE_PRODUCT_API, json={
                'id': id,
                'aiReviews': ai_reviews
            })
            
            save_result = save_response.json()
            print("‚úÖ Reviews saved to DB:", save_result)
            
            return jsonify({'reviews': ai_reviews})
            
        except json.JSONDecodeError:
            print("‚ùå Invalid review JSON:", raw_content)
            return jsonify({'error': 'Review JSON is invalid.'}), 500

    except Exception as e:
        print(f"‚ùå Error creating reviews: {str(e)}")
        return jsonify({'error': 'Server error when creating reviews'}), 500

@app.route('/api/openai/optimize', methods=['POST'])
def openai_optimize():
    try:
        data = request.get_json()
        id = data.get('id')
        title = data.get('title')
        description = data.get('description')
        featured_media = data.get('featuredMedia')
        image = data.get('image')

        if not all([id, title, description]):
            print("‚ùå Error: Missing ID, title or description!")
            return jsonify({'error': 'Missing ID, title or description!'}), 400

        # Generate prompt
        prompt = generate_prompt(title, description, library_data, featured_media, image)
        print("üì© JSON Prompt sent to OpenAI:", prompt)

        # Call OpenAI API with new syntax
        response = openai.chat.completions.create(
            model="gpt-4o-mini",  # Using gpt-4o-mini model
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia content SEO vi·∫øt content cho c√°c s√†n ph·∫©m c·ªßa ecommerce."},
                {"role": "user", "content": prompt}
            ]
        )

        raw_content = response.choices[0].message.content
        raw_content = raw_content.strip().replace('```json', '').replace('```', '').strip()

        try:
            ai_response = json.loads(raw_content)
            print("‚úÖ OpenAI returned valid JSON:", ai_response)
        except json.JSONDecodeError:
            print("‚ùå Invalid JSON:", raw_content)
            return jsonify({'error': 'OpenAI response is not valid JSON.'}), 500

        # Save to database
        save_response = requests.post(SAVE_PRODUCT_API, json={
            'id': id,
            'optimizedTitle': ai_response['optimizedTitle'],
            'optimizedDescription': ai_response['optimizedDescription']
        })

        save_result = save_response.json()
        print("üì© Database save result:", save_result)

        return jsonify({
            'success': True,
            'message': 'AI data processed and saved to DB!',
            'data': {
                'optimizedTitle': ai_response['optimizedTitle'],
                'optimizedDescription': ai_response['optimizedDescription']
            },
            'dbResult': save_result
        })

    except Exception as e:
        print(f"‚ùå Error calling OpenAI: {str(e)}")
        return jsonify({'error': 'Failed to fetch data from OpenAI'}), 500

@app.route('/api/optimize-background', methods=['POST'])
def optimize_background():
    try:
        data = request.get_json()
        print("üì• Received request data:", data)
        
        if not data or 'featuredMedia' not in data:
            print("‚ùå Error: No featuredMedia provided")
            return jsonify({'error': 'No featuredMedia provided'}), 400

        image_url = data['featuredMedia']
        product_id = data.get('id')  # L·∫•y ID s·∫£n ph·∫©m t·ª´ request
        print("üåê Fetching image from URL:", image_url)

        # T·∫£i ·∫£nh t·ª´ URL
        response = requests.get(image_url)
        if not response.ok:
            print("‚ùå Error fetching image:", response.status_code)
            return jsonify({'error': 'Failed to fetch image from URL'}), 400

        image_data = response.content
        print("‚úÖ Image fetched successfully, size:", len(image_data))

        # T·∫°o prompt cho Gemini
        prompt = """Change the background to a consistent off-white color with the hex code #f0f0f2, ensuring no variations in tone, texture, or lighting. The background should be clean, evenly lit, and completely uniform. Center the product prominently within the frame, allowing it to occupy a significant portion of the image without touching the edges. Employ soft, diffused lighting that accurately showcases the product's natural shape, material texture, and subtle highlights without creating harsh shadows or glare. Maintain the original colors of the product precisely, avoiding any color enhancements or tone shifts. Ensure the subject is in sharp focus with high resolution, capturing intricate details, contours, and negative space with clarity in a close-up style."""

        print("ü§ñ Sending request to Gemini API...")
        # G·ªçi Gemini API ƒë·ªÉ t·ªëi ∆∞u ·∫£nh
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=[
                prompt,
                types.Part(inline_data=types.Blob(
                    mime_type="image/png",
                    data=image_data
                ))
            ],
            config=types.GenerateContentConfig(
                response_modalities=["Text", "Image"]
            )
        )

        print("‚úÖ Received response from Gemini API")
        # Tr√≠ch xu·∫•t ·∫£nh ƒë√£ t·ªëi ∆∞u t·ª´ response
        result_image = None
        for candidate in response.candidates:
            for part in candidate.content.parts:
                if part.inline_data and part.inline_data.mime_type == "image/png":
                    result_image = base64.b64encode(part.inline_data.data).decode('utf-8')
                    break
            if result_image:
                break

        if not result_image:
            print("‚ùå No optimized image in response")
            return jsonify({'error': 'Failed to optimize image'}), 500

        print("‚úÖ Image optimized successfully")
        # L∆∞u k·∫øt qu·∫£ v√†o optimize_image_data
        result_id = str(optimize_image_data['next_id'])
        optimize_image_data['next_id'] += 1
        
        # L∆∞u ·∫£nh g·ªëc v√† ·∫£nh ƒë√£ t·ªëi ∆∞u v√†o th∆∞ m·ª•c
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        original_image_path = os.path.join(OPTIMIZED_IMAGES_DIR, f'original_{result_id}_{timestamp}.png')
        optimized_image_path = os.path.join(OPTIMIZED_IMAGES_DIR, f'optimized_{result_id}_{timestamp}.png')
        
        # L∆∞u ·∫£nh g·ªëc
        with open(original_image_path, 'wb') as f:
            f.write(image_data)
        print(f"üíæ Original image saved to: {original_image_path}")
        
        # L∆∞u ·∫£nh ƒë√£ t·ªëi ∆∞u
        with open(optimized_image_path, 'wb') as f:
            f.write(base64.b64decode(result_image))
        print(f"üíæ Optimized image saved to: {optimized_image_path}")
        
        optimize_image_data['results'][result_id] = {
            'id': result_id,
            'original_image': base64.b64encode(image_data).decode('utf-8'),
            'result_image': result_image,
            'prompt': prompt,
            'timestamp': datetime.now().timestamp(),
            'creation_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'original_image_path': original_image_path,
            'optimized_image_path': optimized_image_path
        }
        
        # L∆∞u v√†o file
        save_optimize_image_data()
        print("üíæ Results saved to local database")

        # L∆∞u v√†o database ch√≠nh
        if product_id:
            print("üì§ Saving optimized image to main database...")
            try:
                save_response = requests.post(SAVE_OPTIMIZED_IMAGE_API, json={
                    'id': product_id,
                    'optimizedImage': result_image
                })
                
                if not save_response.ok:
                    print(f"‚ùå Error saving to main database. Status: {save_response.status_code}")
                    print(f"‚ùå Error response: {save_response.text}")
                    return jsonify({
                        'success': True,
                        'image': result_image,
                        'id': result_id,
                        'warning': f'Failed to save to main database: {save_response.text}',
                        'local_paths': {
                            'original': original_image_path,
                            'optimized': optimized_image_path
                        }
                    })
                
                save_result = save_response.json()
                print("‚úÖ Image saved to main database:", save_result)
            except Exception as e:
                print(f"‚ùå Exception when saving to main database: {str(e)}")
                return jsonify({
                    'success': True,
                    'image': result_image,
                    'id': result_id,
                    'warning': f'Failed to save to main database: {str(e)}',
                    'local_paths': {
                        'original': original_image_path,
                        'optimized': optimized_image_path
                    }
                })

        return jsonify({
            'success': True,
            'image': result_image,
            'id': result_id,
            'local_paths': {
                'original': original_image_path,
                'optimized': optimized_image_path
            }
        })

    except Exception as e:
        print(f"‚ùå Error in optimize_background: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/openai/faqs', methods=['POST'])
def openai_faqs():
    try:
        data = request.get_json()
        product_id      = data.get('id')
        title           = data.get('title')
        description     = data.get('description')
        featured_media  = data.get('featuredMedia')

        # Validate
        if not all([product_id, title, description, featured_media]):
            return jsonify({'error': 'Missing required fields'}), 400

        # Build prompt cho FAQ
        faq_prompt = f"""
            You are an expert eCommerce assistant. Generate a product-specific FAQ section in strict JSON format, exactly matching this schema:

            {{
            "heading": "<Section Heading>",
            "description": "<Short intro description>",
            "accordions": [
                {{
                "title": "<Question 1>",
                "content": "<Answer 1>"
                }},
                {{
                "title": "<Question 2>",
                "content": "<Answer 2>"
                }}
                // ‚Ä¶at least 4 FAQs
            ]
            }}

            Product details:
            - Title: {title}
            - Description: {description}
            - Media URL: {featured_media}

            Return only the JSON object, no extra text or markdown.
        """

        # G·ªçi OpenAI
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You create concise, on‚Äëpoint product FAQs."},
                {"role": "user",   "content": faq_prompt}
            ]
        )

        # L·∫•y v√† clean raw content
        raw = response.choices[0].message.content
        raw = raw.strip().replace('```json', '').replace('```', '').strip()

        # Parse JSON
        try:
            faq_data = json.loads(raw)
        except json.JSONDecodeError:
            print("‚ùå Invalid FAQ JSON:", raw)
            return jsonify({'error': 'FAQ JSON is invalid.'}), 500

        # L∆∞u v√†o database (ch·ªâ field faqs)
        save_resp = requests.post(SAVE_PRODUCT_API, json={
            'id':   product_id,
            'faqs': faq_data
        })
        save_result = save_resp.json()
        print("‚úÖ FAQs saved to DB:", save_result)

        # Tr·∫£ v·ªÅ client
        return jsonify({'faqs': faq_data})

    except Exception as e:
        print(f"‚ùå Error creating FAQs: {e}")
        return jsonify({'error': 'Server error when creating FAQs'}), 500


if __name__ == '__main__':
    app.run(port=5004, debug=True)

